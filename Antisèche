Databases are managed by Database Management Systems (DBMS).
DBMS allows the description of the data and the relations concerning them, the interrogation of the base, its update and the sharing and the protection of the data of the base.
DBMS : Data Base Management System. Example : PostgreSQL, MySQL, Oracle, Microsoft SQL Server.

SQL allows to create tables and to modify them. SQL : Structured Query Language.

DataBase : - store data (relational model)
           - Manipulate these data (queries, procedures...)
           - Can be used in a programming language. Example : Java, C++ etc..

Transaction : it's a program unit where execution may change or not the content of a database.
If the transaction only retrieve data , then do not update the database, this type of transaction is called "a read only database".

DBMS Transaction must be ACID.

ACID : Atomicity, consistency, Isolation, Durability. In order to ensure accuracy, completeness and data integrity.

Atomicity : require that each transaction is 'all or nothing'  - all of it's operations are executed or none
                                                               - there must be no state in a DB where a transaction is left partially completed
                                                               
Consistency : Ensure that any transaction will bring the DB from one valid state to another.
- The DB must stay in a consistant state after any transaction
- If the DB was in consistant state before the execution of a transaction, it must stay consistent after the execution of the transaction as well.

Isolation : Ensure that multiple transaction can occur concurrently whithout leading to the inconsistency of DB state.
- All the transaction will be carried out and executed as if is the only transaction in the system.
- No transaction will affect the existence of any other transaction.

Durability : means that onece a transaction has been commoditted, it will stay in account, even in the event of power less, crashes or error etc..
- if a transaction commit but the system fails before the data could be written on the disk, then the data will be updated once the system spring back into action.

OLTP : On line Transaction Processing
System that support the running activities of the organisation Example : Point of sales in store, ATM, Banks.

Join Méthods : 

Hash Join : We are using Hash Join to join larger data sets. The optimizer uses the smaller of two data sets to build a hash table on the join keyin memory, using a deterministic hash function to know the location in the hash memory in which  to store each row. The DB scan and probing the hash table to find rows that meets the join condition.
When ? - A relatively large amount of data is joined.
       - The join is an equijoin

Sort/Merge Join : The DB sort 2 data (the sort join operation). For each row, in the first data set, the DB try to probs the second data set for matching raws and join them (Marge Operation).
When ? - In contrast to sort merges, hash joins requiere an equality condition.

Nested Loops : The DB joins small subsets of data, or the DB joins large set of data with the optimizer mode set to FIRST_ROWS
               The inner join condition is an efficient method of accessing the inner node

Cartesian Join : when ? One or more of the tables does not have any join conditions to any other tables in the statement.
The optimizer joins every row from one data source with every row from the other data source.

               
Bilan : 
Nested Join    data set size : small to small
               join criteria : arbitrary comparaison operator
               
Hash Join      data set size : small to large
               join criteria : and in some case != (but never /,>)
               
Sort/Merge Join   data set size : large to large
                  join criteria : <,>,=
                  
Btree - basic Structure (inner node, leaf node) :

An index is an optional structure. Create an index on one or more columns of a table, the benefits: - speeding up data
                                                                                                    - reducing I/O usage
                                                                                                    - reducing CPU usage
                                                                                                    - reducing Memory usage
Inner Nodes and Leaf/leaves nodes: A node with no children is called a leaf of the tree ; all non-leaves are called internal nodes
                               I
                              / \
                             I   I   internal nodes
                            /     \
                           O       O  External / leafs/ leaves nodes
                           
Acces Path : 
- It accept a single row source Input
- It's output is also a row source
- It's a unary operation
- In contrast , a join operation is Binary and receives inputs from two row

Acces Path                    | Btree Index access path | Bit map Index Acces path
- Full table                  | - Index Scan            | - Bitmap conversation to rowid
- Table Accesibility rowid    | - Range scan            | - Single Value
- In - Memory table acces     | - Unique Scan           | - Range scan
                              | - Fast full scan        | - Bitmap merge
                              | - Index skip scan       |
                              | - Index join scan       |


SQL processing : Soft Parse , Hard Parse , shared pool check

Soft Parse : A soft parse is any parse that in not a hard parse. If the submitted statement is the same as a reusable SQL statement in the shared pool, then Oracle reuses the existing codes. This called "Library Cache Hit".
Soft is preferable to Hard parse because the data base skips the optimization and generation steps, proceeding straight to execution.

Hard Parse : If Oracle Data Base cannot reuse existing code, then it must build a new executable version of the application. It's called as Hard Parses or " Librairy Cache Miss".
So during the Hard Parse, the DB acces the library cache and data dictionary cache to check the data dictionary.

Shared Pool Check : 
During the parses, the DB perform a shared pool check to determine whether it can skip ressource intensive steps of statement processing.

SQL : non procedural langage : Final plan : 

Query optimization is the over all process of choosing the most efficient means of executing SQL Statement.
SQL is non procedural langage so the optimization is free to merge , reorganize and process in any order.
An execution plan describe a recommanded method of execution for SQL Statement. The optimizer goal is to generate the most cost effective execution plan (final plan)
based on the existing table statistics histogramms within a time frame : 

1 - Generate multiple Plan
2 - Compare them
3 - Select the most cost effective plan as final Plan

Buffer cache and Database Block : 

Buffer acts as an intermediate (primary) fast acces storage for programs reading or wrinting from/to secondary storage. It's purpose is to speed up acces to disk.

Block : Acces to table rows are usually done by block as they are more afficiency accessed on disk vs accessing row by row.
Tables is represented by Blocks/Page as smallest components. Then, Block/page can be organized into bigger units to furthers speed up acces to them and/or reduce chance of fragmentation.
Block --> extent --> segment hierarchy.

Table access path : 
- Full table scans : Read allrows from a table, and rhen filters out those rows that do not meet the selection criteria Example : SELECT* FROM employées ; 
when ? In general when no other access path give opportunity.

Table access by row ID : 
- RowID : Show where the record is physically located (file, block)
very fast
But we have to get RowID from somewhere

B-tree Index Access Path : 
- Unique index path : This is used when all column of a unique (B-tree) index or an index created as a result of a primary key constraint are specified with equality condition
Example : SELECT* FROM employées WHERE employées_id = 106

- Index range scan : Find a range of values in index entries. Data is returned in the ascendant order of index column.
Example : SELECT* FROM employees WHERE employees_id>190 ; 
when ? if we have equality, equality condition.

- Index full scan : When the Optimizer Uses Index Full Scans ?

       - It can eliminate a separate sorting operation as the data in the index is ordered by index key.
       - Query includes an ORDER BY on indexed non-nullable columns
       - Predicate in WHERE references a column in the index. This column need not be the leading column
       - No predicate is specified, but all of the following conditions are met:
                 - All columns in the table and in the query are in the index
                 - At least one indexed column is not null
                 
- Index Fast Full scan : Fast full index scans are an alternative to a full table scan when the index contains all the columns that are needed for the query,
and at least one column in the index key has the NOT NULL constraint.
       - A fast full scan accesses the data in the index itself, without accessing the table. It cannot be used to eliminate a sort operation, 
       because the data is not ordered by the index key. 
       - It reads the entire index using multiblock reads, unlike a full index scan, and can be parallelized.


Index Clustering Factor : 

For a B-tree index, the  Index Clustering Factor measures the physical grouping of rows in relation to an index value. 
The index clustering factor helps the optimizer decide whether an index scan or full table scan is more efficient for certain queries. 
A low clustering factor indicates an efficient index scan.

- The number of I/Os that would be performed in order to read the entire table via the index in a single range scan
- The number of I/Os has to be at least the number of blocks in the table.










